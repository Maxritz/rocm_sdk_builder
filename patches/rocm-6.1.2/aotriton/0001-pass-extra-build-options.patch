From 774e0e918e3baa52d2fbac38c88431d0561cb746 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Mon, 4 Nov 2024 15:32:47 -0800
Subject: [PATCH 1/5] pass extra build options

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 CMakeLists.txt                     | 25 ++++++++++++++++++++++++-
 third_party/triton/CMakeLists.txt  | 12 ++++++++++++
 third_party/triton/python/setup.py | 21 +++++++++++++++++++++
 v2python/compile.py                |  2 ++
 v2python/generate_compile.py       |  7 ++++++-
 v2src/CMakeLists.txt               |  3 +++
 6 files changed, 68 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c5f2522..cebbcfd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -25,6 +25,28 @@ option(AOTRITON_NOIMAGE_MODE "Only build C++ Shim part. Kernel image builds are
 set(AOTRITON_GPU_BUILD_TIMEOUT "8.0" CACHE STRING "GPU kernel compiler times out after X minutes. 0 for indefinite. Highly recommended if AOTRITON_BUILD_FOR_TUNING=On.")
 set(TARGET_GPUS "MI200;MI300X;Navi31" CACHE STRING "Target Architecture (Note here uses Trade names)")
 
+if(EXISTS "${CMAKE_INSTALL_PREFIX}/lib64/libhsa-runtime64.so")
+    set(AMDHSA_LD_PRELOAD "${CMAKE_INSTALL_PREFIX}/lib64/libhsa-runtime64.so" CACHE STRING "Workaround of libamdhip64.so.5: undefined symbol: hsa_amd_memory_async_copy_on_engine")
+else()
+    set(AMDHSA_LD_PRELOAD "${CMAKE_INSTALL_PREFIX}/lib/libhsa-runtime64.so" CACHE STRING "Workaround of libamdhip64.so.5: undefined symbol: hsa_amd_memory_async_copy_on_engine")
+endif()
+
+if(EXISTS "${CMAKE_INSTALL_PREFIX}/llvm/bin/llvm-objcopy")
+    set(LLVM_PREFIX_PATH "${CMAKE_INSTALL_PREFIX}/llvm" CACHE STRING "llvm compiler toolchain location dir prefix")
+else()
+    set(LLVM_PREFIX_PATH "${CMAKE_INSTALL_PREFIX}" CACHE STRING "llvm compiler toolchain location dir prefix")
+endif()
+
+option(TRITON_USE_ROCM "Enable build for ROCm" OFF)
+option(ROCM_DEFAULT_DIR "ROCM_SDK_BUILD_DIR" "/opt/rocm")
+option(MLIR_ENABLE_DUMP "Enable MLIR_DUMP" 0)
+option(LLVM_IR_ENABLE_DUMP "Enable LLVM_IR_DUMP" 0)
+option(AMDGCN_ENABLE_DUMP "Enable AMDGCN_DUMP" 0)
+
+set(AMDGPU_TARGETS "${DEFAULT_AMDGPU_TARGETS}" CACHE STRING "List of specific machine types for library to target")
+
+message(STATUS "TRITON_USE_ROCM: ${TRITON_USE_ROCM} MLIR_ENABLE_DUMP: ${MLIR_ENABLE_DUMP} LLVM_IR_ENABLE_DUMP: ${LLVM_IR_ENABLE_DUMP} AMDGCN_ENABLE_DUMP: ${AMDGCN_ENABLE_DUMP} target GPUS: ${TARGET_GPUS}")
+
 # Early failure for python binding
 if(NOT AOTRITON_NO_PYTHON)
   find_package(Python3 ${AOTRITON_MIN_PYTHON} COMPONENTS Development REQUIRED)
@@ -53,6 +75,7 @@ target_link_libraries(lzma_interface INTERFACE ${LZMA_LIBRARIES})
 target_link_directories(lzma_interface INTERFACE ${LZMA_LIBRARY_DIRS})
 target_include_directories(lzma_interface INTERFACE ${LZMA_INCLUDE_DIRS})
 
+set(AOTRITON_EXTRA_COMPILER_OPTIONS "-I${CMAKE_INSTALL_PREFIX}/include/ ")
 if(AOTRITON_ENABLE_ASAN)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fsanitize=address -fno-omit-frame-pointer")
 endif()
@@ -83,7 +106,7 @@ if(NOT AOTRITON_NOIMAGE_MODE)
   message("AOTRITON_TRITON_EGGLINK ${AOTRITON_TRITON_EGGLINK}")
 
   add_custom_command(OUTPUT "${AOTRITON_TRITON_EGGLINK}"
-    COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} TRITON_BUILD_DIR=${TRITON_BUILD_DIR} "${VENV_DIR}/bin/python" setup.py develop
+    COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} TRITON_USE_ROCM=${TRITON_USE_ROCM} ROCM_DEFAULT_DIR=${ROCM_DEFAULT_DIR} MLIR_ENABLE_DUMP=${MLIR_ENABLE_DUMP} LLVM_IR_ENABLE_DUMP=${LLVM_IR_ENABLE_DUMP} AMDGCN_ENABLE_DUMP=${AMDGCN_ENABLE_DUMP} TRITON_BUILD_DIR=${TRITON_BUILD_DIR} "${VENV_DIR}/bin/python" setup.py develop
     # COMMAND ${CMAKE_COMMAND} -E env VIRTUAL_ENV=${VENV_DIR} python -m pip show triton
     WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/third_party/triton/python/"
     BYPRODUCTS "${AOTRITON_TRITON_SO}"
diff --git a/third_party/triton/CMakeLists.txt b/third_party/triton/CMakeLists.txt
index a892a66..fef1767 100644
--- a/third_party/triton/CMakeLists.txt
+++ b/third_party/triton/CMakeLists.txt
@@ -28,6 +28,18 @@ option(TRITON_BUILD_PROTON "Build the Triton Proton profiler" ON)
 option(TRITON_BUILD_UT "Build C++ Triton Unit Tests" ON)
 set(TRITON_CODEGEN_BACKENDS "" CACHE STRING "Enable different codegen backends")
 
+option(TRITON_USE_ROCM "Enable build for ROCm" ON)
+option(ROCM_DEFAULT_DIR "ROCM_SDK_BUILD_DIR" "/opt/rocm")
+option(MLIR_ENABLE_DUMP "Enable MLIR_DUMP" 0)
+option(LLVM_IR_ENABLE_DUMP "Enable LLVM_IR_DUMP" 0)
+option(AMDGCN_ENABLE_DUMP "Enable AMDGCN_DUMP" 0)
+
+message(STATUS "TRITON_USE_ROCM: ${TRITON_USE_ROCM}")
+message(STATUS "ROCM_DEFAULT_DIR: ${ROCM_DEFAULT_DIR}")
+message(STATUS "MLIR_ENABLE_DUMP: ${MLIR_ENABLE_DUMP}")
+message(STATUS "LLVM_IR_ENABLE_DUMP: ${LLVM_IR_ENABLE_DUMP}")
+message(STATUS "AMDGCN_ENABLE_DUMP: ${AMDGCN_ENABLE_DUMP}")
+
 # Ensure Python3 vars are set correctly
 # used conditionally in this file and by lit tests
 
diff --git a/third_party/triton/python/setup.py b/third_party/triton/python/setup.py
index 544df97..9dd18e6 100644
--- a/third_party/triton/python/setup.py
+++ b/third_party/triton/python/setup.py
@@ -422,6 +422,27 @@ class CMakeBuild(build_ext):
             "-DTRITON_CODEGEN_BACKENDS=" + ';'.join([b.name for b in backends if not b.is_external]),
             "-DTRITON_PLUGIN_DIRS=" + ';'.join([b.src_dir for b in backends if b.is_external])
         ]
+        triton_use_rocm = os.getenv('TRITON_USE_ROCM')
+        if triton_use_rocm is None:
+            triton_use_rocm=OFF
+        cmake_args.append("-DTRITON_USE_ROCM=" + triton_use_rocm)
+        rocm_default_dir = os.getenv('ROCM_DEFAULT_DIR')
+        if rocm_default_dir is None:
+            rocm_default_dir="/opt/rocm"
+        cmake_args.append("-DROCM_DEFAULT_DIR=" + rocm_default_dir)
+        mlir_enable_dump = os.getenv('MLIR_ENABLE_DUMP')
+        if mlir_enable_dump is None:
+            mlir_enable_dump="0"
+        cmake_args.append("-DMLIR_ENABLE_DUMP=" + mlir_enable_dump)
+        llvm_ir_enable_dump = os.getenv('LLVM_IR_ENABLE_DUMP')
+        if llvm_ir_enable_dump is None:
+            llvm_ir_enable_dump="0"
+        cmake_args.append("-DLLVM_IR_ENABLE_DUMP=" + llvm_ir_enable_dump)
+        amdgcn_enable_dump = os.getenv('AMDGCN_ENABLE_DUMP')
+        if amdgcn_enable_dump is None:
+            amdgcn_enable_dump="0"
+        cmake_args.append("-DAMDGCN_ENABLE_DUMP=" + amdgcn_enable_dump)
+
         if lit_dir is not None:
             cmake_args.append("-DLLVM_EXTERNAL_LIT=" + lit_dir)
         cmake_args.extend(thirdparty_cmake_args)
diff --git a/v2python/compile.py b/v2python/compile.py
index b71b3b6..4f37a98 100644
--- a/v2python/compile.py
+++ b/v2python/compile.py
@@ -45,6 +45,7 @@ def parse():
     parser.add_argument("--verbose", "-v", help="Enable vebose output", action='store_true')
     parser.add_argument("--nostrip", help="Keep debugging symbols", action='store_true')
     parser.add_argument("--timeout", type=float, default=0.0, help='Maximal time the compiler can run. Passing 0 for indefinite.')
+    parser.add_argument("--llvm_prefix_path", type=str, default='/opt/rocm/llvm', help="llvm compiler toolchain location dir prefix")
     args = parser.parse_args()
     return args
 
@@ -54,6 +55,7 @@ def do_compile(args):
     from triton.backends.amd.driver import ty_to_cpp
 
     out_path = args.out_path
+    llvm_prefix_path = args.llvm_prefix_path if args.llvm_prefix_path else "/opt/rocm/llvm"
 
     # execute python sources and extract functions wrapped in JITFunction
     arg_path = Path(args.path)
diff --git a/v2python/generate_compile.py b/v2python/generate_compile.py
index 8afa4a9..4b1ea27 100644
--- a/v2python/generate_compile.py
+++ b/v2python/generate_compile.py
@@ -116,6 +116,8 @@ def parse():
                    help="Ahead of Time (AOT) Compile Architecture. PyTorch is required for autodetection if --targets is missing.")
     p.add_argument("--build_dir", type=str, default='build/', help="build directory")
     p.add_argument("--python", type=str, default=None, help="python binary to run compile.py")
+    p.add_argument("--libhsa_runtime64", type=str, default='/opt/rocm_sdk/lib/libhsa-runtime64.so', help="libhsa_runtime64.so location")
+    p.add_argument("--llvm_prefix_path", type=str, default='/opt/rocm/llvm', help="llvm compiler toolchain location dir prefix")
     p.add_argument("--bare_mode", action='store_true', help="Instead of generating a proper Makefile, only generate compiler options and leave the remaining tasks to cmake.")
     p.add_argument("--test_clustering", action='store_true', help="Generate TestClustering.sh to find the optimal clustering scheme.")
     p.add_argument("--generate_cluster_info", action='store_true', help="Generate Bare.functionals for clustering.")
@@ -129,6 +131,7 @@ def parse():
     return args
 
 def gen_from_object(args, o : 'ObjectFileDescription', makefile):
+    llvm_prefix_path = args.llvm_prefix_path
     if args.test_clustering or args.generate_cluster_info:
         args._cluster_registry.collect_object_file(o)
     if args.bare_mode:
@@ -139,6 +142,7 @@ def gen_from_object(args, o : 'ObjectFileDescription', makefile):
     print(target_fn, ':', o.src.absolute(), COMPILER.absolute(), file=makefile)
     cmd  = f'LD_PRELOAD=$(LIBHSA_RUNTIME64) {COMPILER} {o.src.absolute()} --kernel_name {o.entrance} -o {o.obj.absolute()}'
     cmd += f' -g 1,1,1 --num_warps {o.num_warps} --num_stages {o.num_stages} --waves_per_eu {o.waves_per_eu}'
+    cmd += f' --llvm_prefix_path {llvm_prefix_path}'
     if o.target_gpu is not None:
         cmd += f" --target '{o.target_gpu}'"
         target_gpu = o.target_gpu
@@ -177,10 +181,11 @@ def gen_from_kernel(args, k, build_dir, makefile):
 def main():
     args = parse()
     build_dir = Path(args.build_dir)
+    libhsa_runtime64_path = args.libhsa_runtime64
     fn = 'Bare.compile' if args.bare_mode else 'Makefile.compile'
     with open(build_dir / fn, 'w') as f:
         if not args.bare_mode:
-            print('LIBHSA_RUNTIME64=/opt/rocm/lib/libhsa-runtime64.so\n', file=f)
+            print('LIBHSA_RUNTIME64=' + libhsa_runtime64_path + '\n', file=f)
         makefile_content = io.StringIO()
         per_kernel_targets = []
         for k in triton_kernels:
diff --git a/v2src/CMakeLists.txt b/v2src/CMakeLists.txt
index 4eb517f..d7b34ad 100644
--- a/v2src/CMakeLists.txt
+++ b/v2src/CMakeLists.txt
@@ -1,6 +1,7 @@
 # Copyright © 2023-2024 Advanced Micro Devices, Inc.
 # SPDX-License-Identifier: MIT
 
+
 message("CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR}")
 message("CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}")
 cmake_path(GET CMAKE_CURRENT_SOURCE_DIR PARENT_PATH CMAKE_CURRENT_SOURCE_PARENT_DIR)
@@ -43,6 +44,8 @@ if(NOT AOTRITON_NOIMAGE_MODE)
     --build_dir "${AOTRITON_V2_BUILD_DIR}"
     --bare_mode ${GENERATE_OPTION}
     --generate_cluster_info
+    --libhsa_runtime64 "${AMDHSA_LD_PRELOAD}"
+    --llvm_prefix_path "${LLVM_PREFIX_PATH}"
     COMMAND_ECHO STDOUT
     WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_PARENT_DIR}"
     COMMAND_ERROR_IS_FATAL ANY
-- 
2.43.0

