From d18c70c418db1ad17ccfad1d744779219bbe46f0 Mon Sep 17 00:00:00 2001
From: Mika Laitio <lamikr@gmail.com>
Date: Sat, 9 Nov 2024 14:51:17 -0800
Subject: [PATCH 4/5] add gfx902 vega11

Signed-off-by: Mika Laitio <lamikr@gmail.com>
---
 Tensile/AsmCaps.py                            | 42 +++++++++++++++++++
 Tensile/Code.py                               |  4 +-
 Tensile/Common.py                             | 11 ++---
 Tensile/SolutionLibrary.py                    |  2 +-
 Tensile/Source/CMakeLists.txt                 |  4 +-
 Tensile/Source/lib/include/Tensile/AMDGPU.hpp |  7 ++++
 .../include/Tensile/PlaceholderLibrary.hpp    |  3 ++
 .../Tensile/Serialization/Predicates.hpp      |  1 +
 .../preload_kernel_arguments_always_half.yaml |  2 +-
 9 files changed, 65 insertions(+), 11 deletions(-)

diff --git a/Tensile/AsmCaps.py b/Tensile/AsmCaps.py
index 53d22cad..353eee66 100644
--- a/Tensile/AsmCaps.py
+++ b/Tensile/AsmCaps.py
@@ -125,6 +125,48 @@ CACHED_ASM_CAPS = \
              'v_mad_mix_f32': True,
              'v_pk_fma_f16': True,
              'v_pk_fmac_f16': False},
+(9, 0, 2): {'HasAddLshl': True,
+             'HasAtomicAdd': False,
+             'HasDirectToLdsDest': False,
+             'HasDirectToLdsNoDest': True,
+             'HasExplicitCO': True,
+             'HasExplicitNC': False,
+             'HasGLCModifier': True,
+             'HasLshlOr': True,
+             'HasMFMA': False,
+             'HasMFMA_b8': False,
+             'HasMFMA_bf16_1k': False,
+             'HasMFMA_bf16_original': False,
+             'HasMFMA_constSrc': False,
+             'HasMFMA_f64': False,
+             'HasMFMA_f8': False,
+             'HasMFMA_i8_908': False,
+             'HasMFMA_i8_940': False,
+             'HasMFMA_vgpr': False,
+             'HasMFMA_xf32': False,
+             'HasSMulHi': True,
+             'HasWMMA': False,
+             'KernargPreloading': False,
+             'MaxLgkmcnt': 15,
+             'MaxVmcnt': 63,
+             'SupportedISA': True,
+             'SupportedSource': True,
+             'VOP3v_dot4_i32_i8': False,
+             'v_dot2_f32_f16': False,
+             'v_dot2c_f32_f16': False,
+             'v_dot4_i32_i8': False,
+             'v_dot4c_i32_i8': False,
+             'v_fma_f16': True,
+             'v_fma_f32': True,
+             'v_fma_f64': True,
+             'v_fma_mix_f32': False,
+             'v_fmac_f16': False,
+             'v_fmac_f32': False,
+             'v_mac_f16': True,
+             'v_mac_f32': True,
+             'v_mad_mix_f32': True,
+             'v_pk_fma_f16': True,
+             'v_pk_fmac_f16': False},
  (9, 0, 6): {'HasAddLshl': True,
              'HasAtomicAdd': False,
              'HasDirectToLdsDest': False,
diff --git a/Tensile/Code.py b/Tensile/Code.py
index 61cc9553..9b3af7a0 100644
--- a/Tensile/Code.py
+++ b/Tensile/Code.py
@@ -434,7 +434,7 @@ class  MacInst (Inst):
                     bStr = "v[%s+%u]" \
                         % ("vgprValuB_X%u_I%u"%(self.PLR,iui), self.bIdx)
                     kStr += "v_mac_f16 %s, %s, %s\n" % (cStr, aStr, bStr) # FIXME op_sel
-        elif self.version == (9,0,0):
+        elif self.version == (9,0,0) or self.version == (9,0,2):
           if self.kernel["ProblemType"]["HighPrecisionAccumulate"]:
             # we treat HighPrecisionAccumulate as expanded packed math
             #b = self.bIdx*2
@@ -624,7 +624,7 @@ class  MacInst (Inst):
       elif self.kernel["ProblemType"]["DataType"].isInt8x4():
         if self.version == (8,0,3):
           kStr += "// int8 not implemented yet for gfx803:"
-        elif self.version == (9,0,0):
+        elif self.version == (9,0,0) or self.version == (9,0,2):
           kStr += "// int8 not implemented yet for gfx900:"
         elif self.version == (9,0,6):
           for iui in range(0, self.innerUnroll):
diff --git a/Tensile/Common.py b/Tensile/Common.py
index 372d2524..f1157f00 100644
--- a/Tensile/Common.py
+++ b/Tensile/Common.py
@@ -225,7 +225,7 @@ globalParameters["NumMergedFiles"] = 1            # The number of files that ker
 
 globalParameters["MaxFileName"] = 64              # If a file name would be longer than this, shorten it with a hash.
 globalParameters["SupportedISA"] = [(8,0,3),
-                                    (9,0,0), (9,0,6), (9,0,8), (9,0,10),
+                                    (9,0,0), (9,0,2), (9,0,6), (9,0,8), (9,0,10),
                                     (9,4,0), (9,4,1), (9,4,2),
                                     (10,1,0), (10,1,1), (10,1,2), (10,3,0), (10,3,1), (10,3,2), (10,3,5), (10,3,6),
                                     (11,0,0), (11,0,1), (11,0,2), (11,0,3), (11,5,0), (11,5,1)] # assembly kernels writer supports these architectures
@@ -297,7 +297,7 @@ defaultGlobalParameters = deepcopy(globalParameters)
 
 # Translate GPU targets to filter filenames in Tensile_LOGIC directory
 architectureMap = {
-  'all':'_','gfx000':'none', 'gfx803':'r9nano', 'gfx900':'vega10', 'gfx900:xnack-':'vega10',
+  'all':'_','gfx000':'none', 'gfx803':'r9nano', 'gfx900':'vega10', 'gfx900:xnack-':'vega10', 'gfx902':'vega11', 
   'gfx906':'vega20', 'gfx906:xnack+':'vega20', 'gfx906:xnack-':'vega20',
   'gfx908':'arcturus','gfx908:xnack+':'arcturus', 'gfx908:xnack-':'arcturus',
   'gfx90a':'aldebaran', 'gfx90a:xnack+':'aldebaran', 'gfx90a:xnack-':'aldebaran',
@@ -892,7 +892,7 @@ validParameters = {
     "StaggerU":              [0,2,4,8,16,32,64],
 
     # Stride in bytes for each staggerU 'click'.
-    # 256 is recommended since this is the width of memory channel (on gfx803,gfx900,gf906) - so
+    # 256 is recommended since this is the width of memory channel (on gfx803,gfx900,gfx902,gf906) - so
     # each click will start in a new memory channel and spread traffic among the 16 available channels.
     # For example StaggerUStride=256 and StaggerU=8 will use 8 unique starting points
     # in summation dimension, each offset by 256-bytes - provided the tensor dims are large
@@ -2290,12 +2290,13 @@ def assignGlobalParameters( config ):
     if os.name == "nt":
       globalParameters["CurrentISA"] = (9,0,6)
       printWarning("Failed to detect ISA so forcing (gfx906) on windows")
-  if globalParameters["CurrentISA"] == (9,4,1) or globalParameters["CurrentISA"] == (9,4,2) or \
+  if globalParameters["CurrentISA"] == (9,0,2) or \
+     globalParameters["CurrentISA"] == (9,4,1) or globalParameters["CurrentISA"] == (9,4,2) or \
      globalParameters["CurrentISA"] == (10,3,5) or globalParameters["CurrentISA"] == (10,3,6) or \
      globalParameters["CurrentISA"] == (11,0,0) or globalParameters["CurrentISA"] == (11,0,1) or \
      globalParameters["CurrentISA"] == (11,0,2) or globalParameters["CurrentISA"] == (11,0,3) or \
      globalParameters["CurrentISA"] == (11,5,0) or globalParameters["CurrentISA"] == (11,5,1):
-    printWarning("HardwareMonitor currently disabled for gfx941/942 or gfx1100/01/02/03/50/51")
+    printWarning("HardwareMonitor currently disabled for gfx900/gfx941/942 and gfx1100/01/02/03/50/51")
     globalParameters["HardwareMonitor"] = False
 
   # For ubuntu platforms, call dpkg to grep the version of hip-clang.  This check is platform specific, and in the future
diff --git a/Tensile/SolutionLibrary.py b/Tensile/SolutionLibrary.py
index 0c74758f..1b80ce90 100644
--- a/Tensile/SolutionLibrary.py
+++ b/Tensile/SolutionLibrary.py
@@ -253,7 +253,7 @@ class MasterSolutionLibrary:
 
     @classmethod
     def ArchitectureIndexMap(cls, architectureName):
-        # 'fallback', 'gfx803', 'gfx900', 'gfx906', 'gfx908', 'gfx90a',
+        # 'fallback', 'gfx803', 'gfx900', 'gfx902', 'gfx906', 'gfx908', 'gfx90a',
         # 'gfx940', 'gfx941', 'gfx942', 'gfx1010', 'gfx1011', 'gfx1012',
         # 'gfx1030', 'gfx1031', 'gfx1032', 'gfx1034', 'gfx1035', 'gfx1036',
         # 'gfx1100', 'gfx1101', 'gfx1102', 'gfx1103', 'gfx1150', 'gfx1151'
diff --git a/Tensile/Source/CMakeLists.txt b/Tensile/Source/CMakeLists.txt
index cac37115..76f0953e 100644
--- a/Tensile/Source/CMakeLists.txt
+++ b/Tensile/Source/CMakeLists.txt
@@ -51,9 +51,9 @@ if(NOT DEFINED CXX_VERSION_STRING)
 endif()
 
 if(CMAKE_CXX_COMPILER STREQUAL "hipcc")
-  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906:xnack- gfx908:xnack- gfx90a:xnack- gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036 gfx1100 gfx1101 gfx1102 gfx1103 gfx1150 gfx1151 CACHE STRING "GPU architectures")
+  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx902 gfx906:xnack- gfx908:xnack- gfx90a:xnack- gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036 gfx1100 gfx1101 gfx1102 gfx1103 gfx1150 gfx1151 CACHE STRING "GPU architectures")
 else()
-  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906 gfx908 gfx90a gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036 gfx1100 gfx1101 gfx1102 gfx1103 gfx1150 gfx1151 CACHE STRING "GPU architectures")
+  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx902 gfx906 gfx908 gfx90a gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036 gfx1100 gfx1101 gfx1102 gfx1103 gfx1150 gfx1151 CACHE STRING "GPU architectures")
 endif()
 
 include(CMakeDependentOption)
diff --git a/Tensile/Source/lib/include/Tensile/AMDGPU.hpp b/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
index a20d349c..ea1aa78e 100644
--- a/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
+++ b/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
@@ -57,6 +57,7 @@ namespace Tensile
             //gfx802  =  3,
             gfx803  = 803,
             gfx900  = 900,
+            gfx902  = 902,
             gfx906  = 906,
             gfx908  = 908,
             gfx90a  = 910,
@@ -88,6 +89,8 @@ namespace Tensile
                 return "gfx803";
             case AMDGPU::Processor::gfx900:
                 return "gfx900";
+            case AMDGPU::Processor::gfx902:
+                return "gfx902";
             case AMDGPU::Processor::gfx906:
                 return "gfx906";
             case AMDGPU::Processor::gfx908:
@@ -144,6 +147,10 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx900;
             }
+            else if(deviceString.find("gfx902") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx902;
+            }
             else if(deviceString.find("gfx906") != std::string::npos)
             {
                 return AMDGPU::Processor::gfx906;
diff --git a/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp b/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
index 7ce2b894..b6bc2d93 100644
--- a/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
+++ b/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
@@ -41,6 +41,7 @@ namespace Tensile
         None,
         gfx803,
         gfx900,
+        gfx902,
         gfx906,
         gfx908,
         gfx90a,
@@ -76,6 +77,8 @@ namespace Tensile
             return "TensileLibrary_*_gfx803";
         case LazyLoadingInit::gfx900:
             return "TensileLibrary_*_gfx900";
+        case LazyLoadingInit::gfx902:
+            return "TensileLibrary_*_gfx902";
         case LazyLoadingInit::gfx906:
             return "TensileLibrary_*_gfx906";
         case LazyLoadingInit::gfx908:
diff --git a/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp b/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
index 89690add..76799d75 100644
--- a/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
+++ b/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
@@ -215,6 +215,7 @@ namespace Tensile
             {
                 iot::enumCase(io, value, "gfx803", AMDGPU::Processor::gfx803);
                 iot::enumCase(io, value, "gfx900", AMDGPU::Processor::gfx900);
+                iot::enumCase(io, value, "gfx902", AMDGPU::Processor::gfx902);
                 iot::enumCase(io, value, "gfx906", AMDGPU::Processor::gfx906);
                 iot::enumCase(io, value, "gfx908", AMDGPU::Processor::gfx908);
                 iot::enumCase(io, value, "gfx90a", AMDGPU::Processor::gfx90a);
diff --git a/Tensile/Tests/pre_checkin/preload_kernel_arguments_always_half.yaml b/Tensile/Tests/pre_checkin/preload_kernel_arguments_always_half.yaml
index 2adbf1d0..1eb4b153 100644
--- a/Tensile/Tests/pre_checkin/preload_kernel_arguments_always_half.yaml
+++ b/Tensile/Tests/pre_checkin/preload_kernel_arguments_always_half.yaml
@@ -1,5 +1,5 @@
 TestParameters:
-  marks: [skip-gfx900, skip-gfx906, skip-gfx908,
+  marks: [skip-gfx900, skip-gfx902, skip-gfx906, skip-gfx908,
           skip-gfx1010, skip-gfx1011, skip-gfx1012,
           skip-gfx1030, skip-gfx1031, skip-gfx1032,
           skip-gfx1034, skip-gfx1035, skip-gfx1036,
-- 
2.41.1

